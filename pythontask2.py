# -*- coding: utf-8 -*-
"""pythontask2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1djdUz1F3lr4UwuXoGVYbCZez1ejmwE1h

Q1: Password Validation Function
**Answer:**
The function will:

1. Check for at least two uppercase and two lowercase letters.
2. Check for at least one numeric character.
3. Check for at least three special characters.
4. Ensure the password is at least 10 characters long.
"""

import re

def validate_password(password):
    # Check length
    if len(password) < 10:
        return "Invalid Password"

    # Check for at least two uppercase letters
    if len(re.findall(r'[A-Z]', password)) < 2:
        return "Invalid Password"

    # Check for at least two lowercase letters
    if len(re.findall(r'[a-z]', password)) < 2:
        return "Invalid Password"

    # Check for at least one number
    if len(re.findall(r'[0-9]', password)) < 1:
        return "Invalid Password"

    # Check for at least three special characters
    if len(re.findall(r'[!@#$%^&*(),.?":{}|<>]', password)) < 3:
        return "Invalid Password"

    return "Valid Password"

# Test case
password = "Abc@#$123XY"
result = validate_password(password)
print("Password Validation Result:", result)

"""Q2: Solve Questions Using Functional Programming

a. Check if the string starts with a particular letter

**Answer:**
"""

starts_with = lambda x, letter: x.startswith(letter)

# Test case
print(starts_with("banana", "b"))  # Output: True

"""b. Check if the string is numeric

**Answer**
"""

is_numeric = lambda x: x.isnumeric()

# Test case
print(is_numeric("12345"))  # Output: True
print(is_numeric("abc123"))  # Output: False

"""c. Sort a list of tuples by the second element

**Answer:**
"""

fruits = [("mango", 99), ("orange", 80), ("grapes", 1000)]
sorted_fruits = sorted(fruits, key=lambda x: x[1])

print(sorted_fruits)  # Output: [('orange', 80), ('mango', 99), ('grapes', 1000)]

"""d. Find the squares of numbers from 1 to 10

**Answer:**
"""

squares = list(map(lambda x: x**2, range(1, 11)))

print(squares)  # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

"""e. Find the cube root of numbers from 1 to 10

**Answer:**
"""

cube_roots = list(map(lambda x: round(x**(1/3), 2), range(1, 11)))

print(cube_roots)  # Output: [1.0, 1.26, 1.44, 1.59, 1.71, 1.82, 1.91, 2.0, 2.08, 2.15]

"""f. Check if a given number is even

**Answer:**

"""

is_even = lambda x: x % 2 == 0

# Test case
print(is_even(4))  # Output: True
print(is_even(5))  # Output: False

"""g. Filter odd numbers from a list

**Answer:**
"""

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
odd_numbers = list(filter(lambda x: x % 2 != 0, numbers))

print(odd_numbers)  # Output: [1, 3, 5, 7, 9]

"""h. Sort a list of integers into positive and negative integers lists

**Answer:**
"""

nums = [1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, 0]
positive_nums = sorted([x for x in nums if x > 0])
negative_nums = sorted([x for x in nums if x < 0])

print("Positive Integers:", positive_nums)  # Output: [1, 2, 3, 4, 5, 6]
print("Negative Integers:", negative_nums)  # Output: [-5, -4, -3, -2, -1]